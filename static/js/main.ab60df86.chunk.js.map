{"version":3,"sources":["serviceWorker.js","Components/Search.jsx","Components/Favorites.jsx","App.js","Components/AppRouter.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Search","props","className","onSubmit","handleGetRequest","type","autoComplete","name","placeholder","Favorites","useState","localFav","setLocalFav","newCity","useHistory","console","log","useEffect","state","favorites","map","favorite","index","a","fetch","url","currentWeatherRequest","json","currentWeatherResponse","temp","Temperature","Metric","Value","fav","key","Code","Message","fetchData","to","onClick","goHome","city","clickedCity","Math","round","removeFav","App","API_KEY","currentTemp","setCurrentTemp","currentText","setCurrentText","forecast","setForecast","setCity","setFavorites","isFav","setIsFav","fiveDayURL","currentRequest","currentResponse","weatherText","WeatherText","forecastRequest","forecastResponse","DailyForecasts","getData","e","preventDefault","searchTerm","target","elements","searchValue","value","getCityURL","request","response","arrCityDetails","chosenCity","EnglishName","Key","pathname","filter","newFav","addToFav","Date","slice","Minimum","Maximum","Day","IconPhrase","Night","AppRouter","path","component","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab60df86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nexport default function Search(props) {\r\n    return (\r\n        <div className=\"searchContainer\">\r\n            <form onSubmit={props.handleGetRequest}>\r\n                <input\r\n                    type=\"text\"\r\n                    autoComplete=\"off\"\r\n                    name=\"searchValue\"\r\n                    placeholder=\"search for city\"\r\n                />\r\n                <button>Search</button>\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport Navbar from './Navbar'\r\nimport { UseHistory } from 'react-router-dom'\r\n\r\nexport default function Favorites(props) {\r\n\r\n    const [localFav, setLocalFav] = useState([])\r\n    const [newCity, setNewCity] = useState({})\r\n    const [tempFav, setTempFav] = useState({})\r\n    let history = useHistory()\r\n\r\n    console.log(props);\r\n\r\n    useEffect(() => {\r\n        props.location.state.favorites.map((favorite, index) => {\r\n            async function fetchData() {\r\n                const currentWeatherRequest = await fetch(favorite.url)\r\n                const currentWeatherResponse = await currentWeatherRequest.json()\r\n                console.log(currentWeatherResponse);\r\n                const temp = currentWeatherResponse[0].Temperature.Metric.Value\r\n                const fav = { name: favorite.name, url: favorite.url, key: favorite.key, temp: temp }\r\n                console.log(temp);\r\n                setLocalFav([...localFav, fav])\r\n                console.log(localFav);\r\n\r\n\r\n                if (currentWeatherResponse.Code === 'ServiceUnavailable') {\r\n                    console.log(currentWeatherResponse.Message)\r\n                    return <div>{currentWeatherResponse.Message}</div>\r\n                }\r\n            }\r\n            fetchData()\r\n            // setLocalFav(props.location.state.favorites)\r\n        })\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            {localFav !== [] && <div>\r\n                <Link to='/'>\r\n                    <button onClick={() => props.goHome(localFav, newCity)} className=\"nav-button\" city={newCity}>Home</button>\r\n                </Link>\r\n                <Link to='/favorites'><button>Favorites</button></Link>\r\n                <div className=\"favorite\">\r\n                    {localFav.map((fav, index) => {\r\n                        return (\r\n                            <div onClick={() => { props.clickedCity(fav.key, localFav, fav.name, fav.url) }} className=\"favcontainer\">\r\n                                <h2>{fav.name}</h2>\r\n                                <h4>{Math.round(localFav[index].temp)}</h4>\r\n                                <button onClick={() => props.removeFav(fav.key)}>Remove</button>\r\n                            </div>\r\n\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport './App.css'\nimport Navbar from './Components/Navbar'\nimport ForecastDetails from './Components/ForecastDetails'\nimport Search from './Components/Search'\nimport Favorites from './Components/Favorites'\n\nexport default function App(props) {\n  const API_KEY = '8rDihLNZMdzkxHnLe8F0V3mjWmV7wA0v'\n  let history = useHistory();\n\n  const [currentTemp, setCurrentTemp] = useState('')\n  const [currentText, setCurrentText] = useState('')\n  const [forecast, setForecast] = useState([])\n  const [city, setCity] = useState({ name: 'Tel-Aviv', url: `http://dataservice.accuweather.com/currentconditions/v1/215854?apikey=${API_KEY}`, key: 215854 });\n  const [favorites, setFavorites] = useState([])\n  const [isFav, setIsFav] = useState(false)\n\n\n  useEffect(() => {\n    if (!city) { setCity({ name: 'Tel-Aviv', url: `http://dataservice.accuweather.com/currentconditions/v1/215854?apikey=${API_KEY}`, key: 215854 }) }\n    const fiveDayURL = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${city.key}?apikey=${API_KEY}&metric=true`\n    async function getData() {\n      const currentRequest = await fetch(city.url)\n      const currentResponse = await currentRequest.json()\n      if (currentResponse.Code === 'ServiceUnavailable') {\n        console.log(currentResponse.Message)\n        return <div>{currentResponse.Message}</div>\n      }\n      console.log(currentResponse);\n      const weatherText = currentResponse[0].WeatherText\n      const temp = currentResponse[0].Temperature.Metric.Value\n      setCurrentText(weatherText)\n      setCurrentTemp(temp)\n      const forecastRequest = await fetch(fiveDayURL)\n      const forecastResponse = await forecastRequest.json()\n      console.log(forecastRequest);\n      console.log(forecastResponse);\n      setForecast(forecastResponse.DailyForecasts)\n\n    }\n    getData();\n  }, [city])\n\n\n  const handleGetRequest = async (e) => {\n    e.preventDefault()\n    const searchTerm = e.target.elements.searchValue.value\n    const getCityURL = `http://dataservice.accuweather.com/locations/v1/cities/search?apikey=${API_KEY}&q=${searchTerm}`\n    try {\n      const request = await fetch(getCityURL)\n      const response = await request.json()\n      console.log(request);\n      console.log(response);\n      const arrCityDetails = [...response]\n      const chosenCity = { name: arrCityDetails[0].EnglishName, key: arrCityDetails[0].Key, url: `http://dataservice.accuweather.com/currentconditions/v1/${arrCityDetails[0].Key}?apikey=${API_KEY}` }\n      setCity(chosenCity)\n      setIsFav(false)\n    }\n    catch (error) {\n      console.log(error);\n    }\n  }\n\n  const clickedCity = (key, favorites, name, url) => {\n    setFavorites(favorites)\n    setCity({ name: name, key: key, url: url })\n    history.push('/')\n\n  }\n\n  const addToFav = (city) => {\n    const newFav = city\n    setFavorites([...favorites, newFav])\n    setIsFav(true)\n  }\n\n\n  const removeFav = (key) => {\n\n    setIsFav(false)\n    setFavorites(favorites.filter((fav) => fav.key !== key))\n  }\n\n  const goHome = (city, favorites) => {\n    setCity(city)\n    setFavorites(favorites)\n    history.push('/')\n  }\n\n\n  const formatForDays = (day) => {\n    const findDay = (day) => {\n      switch (day) {\n        case 1:\n          dayText = 'Mon'\n          break;\n        case 2:\n          dayText = 'Tue'\n          break;\n        case 3:\n          dayText = 'Wed'\n          break;\n        case 4:\n          dayText = 'Thu'\n          break;\n        case 5:\n          dayText = 'Fri'\n          break;\n        case 6:\n          dayText = 'Sat'\n          break;\n        case 7:\n          dayText = 'Sun'\n          break;\n\n        default:\n          dayText = 'empty'\n          break;\n      }\n    }\n    let dayText = ''\n    let daysArr = []\n    const date = new Date()\n    const i = date.getDay()\n    for (let index = 0; index < i + 4 - index; index++) {\n      if (index + i < 8) {\n        const dayText = findDay(index + i);\n      } else {\n        const dayText = findDay(index + i - 7)\n      }\n      console.log(dayText);\n      daysArr.push(dayText)\n\n    }\n    console.log(daysArr);\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"navbar\">\n        <Link to='/'>\n          <button>Home</button>\n        </Link>\n        <Link to={{\n          pathname: `/favorites`,\n          state: { favorites }\n        }}>\n          <button className=\"nav-button\" >Favorites</button>\n        </Link>\n\n      </div>\n      <Search handleGetRequest={handleGetRequest} />\n      <div className=\"mainContainer\">\n        <div>\n          <h2>{city.name}</h2>\n          <h3>{currentTemp}°c</h3>\n        </div>\n        <button className=\"addToBut\" onClick={() => { !isFav ? addToFav(city) : removeFav(city.key) }}>{!isFav ? 'Add to Favorites' : 'remove from favorites'}</button>\n      </div>\n      <div>\n        <h1 className=\"weatherText\">{currentText}</h1>\n        {forecast.map((forecast, index) => {\n          return (\n            <div className=\"forecastContainer\">\n              <p>{forecast.Date.slice(0, 10)}</p>\n              <p>{forecast.Temperature.Minimum.Value}</p>\n              <p>{forecast.Temperature.Maximum.Value}</p>\n              <p>{forecast.Day.IconPhrase}</p>\n              <p>{forecast.Night.IconPhrase}</p>\n            </div>\n          )\n        })}\n      </div>\n\n    </div>\n  );\n}\n\n\n\n","import React from 'react'\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\"\r\n\r\nimport App from \"../App\"\r\nimport Search from './Search'\r\nimport Favorites from './Favorites'\r\n\r\nexport default function AppRouter() {\r\n\r\n    return (\r\n\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" component={App} exact />\r\n                <Route path=\"/favorites\" component={Favorites} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from './Components/AppRouter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}